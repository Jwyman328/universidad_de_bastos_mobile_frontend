react_native_notes_2
 

 - you can not put text in a view 
 - the views main job is to apply styles and do layouting

 - like react must have a parent component like a view.

 only about tne core components
 - react native buttons are self closing with a title property 
 <Button title='hello world'/>

 react native is all about compoennts and then adding the right structure to the components 

 - react components take arguments with curls brackets 

 <View something={'something'}> 
 // if you wnat to pass in styles each component has a style parameter 

 <View style={{my style go here, padding:30}}> 
 - the styles parameters takes a styles object which you cna put your css like styles 
 - this is considered na inline style
 -all multie word style properties are camel case like borderColor:'red'

 - each component will have a huge list of props you can set on it 



LAYOUT style    
- must use flexbox 
- things are set by default to use flexbox and use column setting


navigation 
- set up an outer navigation shell like in react. 
- each component that is defined as a screen gets a navigation object passed to it 
    - this navigation object is used to navigate to other screens.
    - you should descrture this navigation object in the props with {{navigation}}
- the navigation uses the Animated library



STARTING APP 
- you need to start up the server with npm start 

- you must start the simulator with a different command


SCROLLVIEW
    - without scroll view we can not scroll to anything that is hidden off the page.
    - must be a bounded height in order to work
    - the children have unbounded height so the scroll view must have bounded height
    - should pass down flex:1 ? 
also could use FlatList,
    - flatlist will only render the elemetns that show on the page where as 
    scrolllview will render everything on the page when the page laods.
    - use contentContainerStyle to style a scrollview 
    - use flexgrow:1 if you want to be able to scroll and have it lock 
    when you scrll down on components
    - so on the scrollview you must use two different style properties one for setting styles 
    and one for setting the layout the styles are the regular style prop 
    and the layout of the elements insde of it is the contentContainerStyle


SafeAreaView?? waht is it 
    - since ios adds this navigation header, you must add this 
    if tou want to automaticallt respond to the header padding 
    instead of manually having to make components have a margin 
    or padding to that autoehader added for navigation


Button!
    - you can barly add styles to a traditional button
    - cant even add a padding so must do a wrapper over it 

seems like a lot of styling problems come from the % based styling i like to do
- never assign a width and a height and jsut use flex box for positions
- as well just use paddings and margins when you ahve no choice 


FLEXBOX REVIEW 
    - fr means free space so it says if there is any free space remaining put it in this component?
    - flexbox by default sets everythign to only as wide and tall as it needs to be when the 
        outer container width and height is not set.
    - if you set the width and height of the parent then the children will expand ot the height of the parent 
    if it is a row, or expand to the width of the parent if it is a column
        - aka they stretch across the cross axis
        - aka align items is stretch by default
        - stretch tells the child how much space to take 
            - where as all other align-items do not
    - space evenly etc. will take the remaining space and distribute it between the items, 
    aka set auto margins
    - flex:1, this means give me 100% of the main axis space and put it in my component, expand my component 
        by that amount of space
    - use flex and pixels so spacing and widths and heights


NAVIGATION COMPONENTS
    - i want to access navigation from any screen so there is a useNavigation hook
    - https://reactnavigation.org/docs/connecting-navigation-prop/
    - alternatively you could use the context api, and put the naviation there  
        but the useNAvigation hook will basically do that for oyu


NAVIGATION DESIGN IN NATIVE 
    - https://www.udemy.com/course/react-native-the-practical-guide/learn/lecture/15674770#overview
    - in the web you enter a url and then react navigator will load a different react component 
    - aka url is the source of truth in the web 

    - difference there is no url in mobile apps, instead we have tabs often at the bottom 
    - or we have stacks of pages, one page to another page and so forth
    - the web uses a single stack to navigate, but navigation on a pgone is more 
        complex.

    - passign props via navigation https://reactnavigation.org/docs/params
        - {route} is what will be passed contining route.params


    STACK NAVIGATION 
        - this is having pages and screens stacked ontop of each other 
        - it is like any other stack it is putting a somethign on top of the stack 
            - and having the previous location below it, and then navigating somewhere else 
                and putting that on the top, 
            - if you want to go back you just pop the screen off hte top of the stack 
        - if you jsut used a single stack navigator it would be exactly like the web
            - being able to go forward and then press back to go to the back page.
        npm install @react-navigation/stack
        - the stack navigation has a screen and a Navigator
        - the screen can have an options prop set on it to name the screen title 
        - sometime we want to add aditional data to a screen header, we can do that by using 
            react context .



    TAB NAVIGATION 
        - adding bottom tabs 
        yarn add @react-navigation/bottom-tabs
       -docs for bottom tab navigator https://reactnavigation.org/docs/bottom-tab-navigator/
        - 

    ICONS 
        - https://github.com/oblador/react-native-vector-icons
        - then you have to put the font folder in node modules into the ios folder 
        - list of all icons https://oblador.github.io/react-native-vector-icons/


    NESTED NAVIGATION -- COMBINDING STACK NAVIGATION AND TAB NAVIGATION 
        -https://reactnavigation.org/docs/nesting-navigators/
        - we set a <Tab.navigation> as a page in the screen navigator 
            - so when you navigate to that page the screen navigator takes over 
        - react navigation 4 and 5 are very different for custimizing the navigators 


    NAVIGATION HEADER OF A NESTED NAVIGATION 
        - https://reactnavigation.org/docs/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state
    
    CUSTOM HEADER COMPONENT 
        - https://reactnavigation.org/docs/headers/    
            - section of the page is  Replacing the title with a custom component







DYNAMIC VAIRABLES in STYLE SHEET?
    - you must create a function that takes in an argument that 
        you want to set to a style parameter and then you set it and return the stylesheet object 
        https://stackoverflow.com/questions/42707327/passing-props-into-external-stylesheet-in-react-native


USEEFFECT STACK OVERFLOW 
    - if you set a state in useEffect aka you only want it to run once 
    remember to set an empty array to the useEffect so it only runs once.

REGONAL STYLES / GLOBAL 
    - you can make a stylesheet variable and save it anywhere and then export it and 
        import it like any other object/variable


HADNLING STATE WITH HTTP REQUESTS ? 
    - hooks 
    https://reactjs.org/docs/hooks-overview.html
    what are hooks? they let you hook into life cycle and state features 
    of a class based component.
    - useEffect hook is used for all start, did update, did close lifecycles.
    - effect hook as access to the latest state of the component.
    - useEffect hook may also specify how to clean up a component
    - a return statement in a useEffect hook will produce a clean up and 
    will not run the function returned from a useEffect hook untill after the component is torn down

    RULES 
        - hooks can not be called inside loops or anything nested 
            they must only be called at the top level of a component


    CUSTOM HOOKS ?
        - custom hooks allow you to customize the interactions between state hooks 
            inside other components while allowing that customization to be utilized in other areas 
           . it is a way to reuse stateful logic but not reuse the same state.
           if you want to reuse the same state it would need to be accessed from inside that hook 
           and set to that custom hooks state. for example like a redux call 
           that sets that hooks state and then provides actions on it.
        - each call to a hook has completley isolated state just like when we use useState,
        useState creates a brand new state object and state changing function, 
        so a custom hook just allows you to modify what you passBack like passing back a function
        to change the state in some unique way, or some type of action that takes place on the 
        data at the beggining of the initializtion or the closign of the component.


useReducer 



useContext 
    - add state and the functions that change that state and consume said state and functions 
        at any level in a tree  
    - using context makes re-using a component difficult. 
        re-used components should more so be using props to get there data but this makes sense 
        an outer component that wont be re-used could use the context api to get the data and then 
        pass it into the component.
    - context takes a default value which when no value is passed into the context api 
        it will use that default value
    - DYNAMIC CONTEXT 
        - so i can consume context but how do i change it in other places?
            - the value you pass in must be from a useState or some type of state hook 
                and then you must pass in the function that changes it. 
    - i was looking at the conte¸¸¸xt api instead of the useContext hook 




API NOTES 
    - react native deals with errors differently because its possible a response in html is sent back 
    and .json wonr handle it 
    - you have to stringify your http requests you cant sned javascript objects,
        everything must be in a string like this {"username":"guestUser@gmail.com" , "password": "test123!123"}


MOVING TO TYPESCRIPT NOTES 
    - all ts files actually have to be tsx files in react if you want to use typescript.


useReducer
    - useReducer is prefereable to useState when you have complex state or when 
        one state relies on another state 
    - also you can pass dispatch down to components allowing them to manipulate state 
        from below where they are initiated, you could do this with passing hte useState 
        changing function but you would have to pass down multiple if you needed to change multiple.

    const [value,dispatch] = useReducer(myReducerSwitchFunction, initialValue);


    reducerFunction(state,action){
        case(action.type){
            case ('')
        }
    }

## use useEffect to listen for changes 


#REACT NATIVE  ANIMATIONS - REACT NATIVE REANIMATED LIBRARY 
    - https://www.youtube.com/watch?v=KnQ6xcVgJec&ab_channel=BenAwad
        it basically wraps the react native animation library and makes it a lot 
            more performant and declaritive
    - original animation library for react native 
        - https://reactnative.dev/docs/animations
    - react native reanimation library 
        - https://docs.swmansion.com/react-native-reanimated/
    - anything you want to interact with you use a PanGestureHandler wrapper around an animated view 
    <PanGestureHandler>
         <Animated.View> <Text> </Text> </Animated.View> 
    </PanGestureHandler>
    and you put stuff inside of it like the Text Box 


    -Info on PanGestureHandler 
        - https://docs.swmansion.com/react-native-gesture-handler/docs/handler-pan/
            - the handler activates when a finger is put on the screen 
            - can detect multiple finger, 
            - can detect where exactly by x,y cordinate the user is.
            - the PanGestureHandler  will send back a lot of data including hte x,y cordinate, the velocity of finger movement 
                - we can use this data in our application, maybe in our styles, or soewehre else
            - how to use that data?
                - the js thread and the UI thread are interacting with eachother 
                - when you interact with the js thread it must then go to the ui thread through the bridge,
                    this takes time and is there for slower,
                    - for animations it is best to interact with just the UI thread so you dont have to 
                        go through the bridge and take more time because animations need to be just in time.
                    -so reanimated offers you differnet functions to use in order to interact with 
                        the native UI thread
            - so PanGestureHandler allows you to react to touching and dragging things 

            - CONDITIONALLY REACT TO A PanGestureHandler
                - you can use the give UI conditional functions to call other functions to happen 
                    depending on a PanGestureHandler data
                - to use these functions you must use a <Animated.code>{some custom library functions here} </Amimated.code>

            - so dragging is only one of the many geatures you can use others like 
                -TapGestureHandler, for registering taps 
                - RotationGestureHandler - for registering the turning of fingers.
                - FlingGestureHandler - tracking a hard and fast movement
                - PinchGestureHandler - track the distance between two fingers 


            - ALso include compoennts 
                - buttons 
                - swipeables - like the email swipe to the left to delete it.

    - MUST LEARN BUILT IN REACT NATIVE ANIMATIONS FIRST 



ANT DESIGN
    https://ant.design/




RESPONSIVE DESIGN 
https://dev.to/newbiebr/how-to-make-your-react-native-apps-responsive-45d8#:~:text=react%2Dnative%2Dnormalize%20is%20a,fontSize%2C%20borderRadius%2C...
- use flexbox 
- avoid hard values 
- use percents 
- flexible hard coded values with normalize function that will generate a hard value depending on the 
    size of the screens height and width 

-IOS SafeAreaView
    - this will only position items avoiding the ios notch.

- develop with the iphone 8 because it is the medium 
then 
- test your app on three screens to make sure it works with small medium and big screens 
iPhone5s (small)
iPhone8 (medium)
iPhoneXs Max (big)

- command line with specific devices 
    - https://blog.echobind.com/how-to-run-react-native-apps-on-a-specific-device-in-the-ios-simulator-41912e69a277

- useWindowDimensions for getting screen width and height 
    -https://reactnative.dev/docs/usewindowdimensions



IMAGES 
    - dont forget that images need to have a fixed width and height 
        for them to show correctly, 
    - you can do responsive image but it is more difficult 
    - also the parent having     flexDirection: 'row',  flexWrap: 'wrap'  is osmetimes needed 


STOPROPAGATION 
    - onStartShouldSetResponder={event => true} on a view to stop it from bubbling up




REACT NATIVE DEEPER DIVE TO INTERNALS
    - what does the link command do when trying to use other packages?
    - the link command will add additional values into the ios and android files.
        - some packages dont actually use the link command and you will manaully have to add 
        the packages in them.
    - some package just autolink and will add those lines for you
    - third party packages will let you know the installation process for messing with the 
        native ios files.

    - for Ios an important folder for importing packages is the 'projectname'.xcodeproj file 
        - the projectname part will be whatever your project is named


    - get familiar with xcode 
        -
        - https://medium.com/@vimniky/how-to-use-vector-icons-in-your-react-native-project-8212ac6a8f06
       - https://www.youtube.com/watch?v=XS2RRDGRGsc&ab_channel=All-OfYou
        - product -> clean build folder 
        - then select simulator 
        - press play 
            - this will open a node server in the terminal
        - in xcode info.plist is a key value based file.

        -build phases where is it?
            - click on the bastos_mobile_app,
            then click on the first file under targets 
            - then build phases will show up

        - vector icons being built twice error 
            - https://github.com/oblador/react-native-vector-icons/issues/851




MODAL 
    - react native has a built in modal component 
    - https://reactnative.dev/docs/modal
    - contains a visible property for setting if visible or not 